import os
import numpy as np
import torch
from torchvision import datasets, transforms
from PIL import Image


def generate_multi_mnist(num_samples, output_dir, train=True,save_images=True):
    """生成 MultiMNIST 数据集"""
    # 确保输出目录存在
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # 加载 MNIST 数据集
    mnist = datasets.MNIST(
        root='./data_Mnist',
        train=train,
        download=False,
        transform=transforms.Compose([
            transforms.Pad(4, fill=0, padding_mode='constant'),  # 将图片调整为 36x36
            transforms.ToTensor()
        ])
    )

    # 将数据集按类别分组
    class_images = {i: [] for i in range(10)}
    for img, label in mnist:
        class_images[label].append(img)

    # 初始化图片和标签列表
    images = []
    labels = []

    # 生成 num_samples 个样本
    for i in range(num_samples):
        # 随机选择两个不同的类别
        label1 = np.random.randint(0, 10)
        label2 = label1
        while label2 == label1:
            label2 = np.random.randint(0, 10)

        # 随机选择两个不同类别的图片
        img1 = class_images[label1][np.random.randint(0, len(class_images[label1]))]
        img2 = class_images[label2][np.random.randint(0, len(class_images[label2]))]

        # 将图片转换为 numpy 数组
        img1_np = img1.numpy().squeeze()
        img2_np = img2.numpy().squeeze()

        # 生成 36x36 的画布
        canvas = np.zeros((36, 36), dtype=np.float32)

        # 随机移动 img1 和 img2，最多四个像素
        def random_shift(img):
            if img is img1_np:
                shift_x = np.random.randint(-6, 0)
                shift_y = np.random.randint(0, 6)
                shifted_img = np.roll(img, shift_x, axis=1)
                shifted_img = np.roll(shifted_img, shift_y, axis=0)
            else:
                shift_x = np.random.randint(0, 6)
                shift_y = np.random.randint(-6, 0)
                shifted_img = np.roll(img, shift_x, axis=1)
                shifted_img = np.roll(shifted_img, shift_y, axis=0)
            return shifted_img

        img1_shifted = random_shift(img1_np)
        img2_shifted = random_shift(img2_np)

        # 叠加两张图片
        combined_img = np.minimum(img1_shifted + img2_shifted, 1.0)  # 防止像素值超过 1.0

        # 将图片转换回 Tensor
        combined_img = torch.from_numpy(combined_img).unsqueeze(0)

        # 保存图像和标签
        if save_images:
            img_path = os.path.join(output_dir, f"sample_{i}.png")
            label_path = os.path.join(output_dir, f"sample_{i}_label.txt")
            Image.fromarray((combined_img.numpy().squeeze() * 255).astype(np.uint8)).save(img_path)
            with open(label_path, 'w') as f:
                f.write(f"{label1},{label2}")

        # 将图片和标签添加到对应列表中
        images.append(combined_img)
        labels.append((label1, label2))

    # 返回图片列表和标签列表
    return images, labels


# 示例调用
if __name__ == "__main__":
    # 生成 1000 个 MultiMNIST 样本并保存到 ./multi_mnist_data
    images, labels = generate_multi_mnist(num_samples=10,train=True, output_dir="./multi_mnist_data")
    print(images[0].shape, labels[0])
    # 查看生成的样本

